clc;clear;l = 2;K = 0.8;h= 0.05;gA=0;gV=0;%gA=0;%gV=0;N = 20;M=4;geom=[l,K, gA, gV];[E v rho] = GetSteel();layerModel = GetLayerModel(-h/2, h/2, rho, E, v);staticIndecies = getBoundaryConditionIndicies(N, M);[vec lam] = solve(geom, layerModel, N, M, staticIndecies);ind = 1;printf ("Minimum frequancy = %f\n", sqrt(lam(ind)));resVector = vec(:, ind)v1 = resVector(1:(M+1)*(N+1))v2 = resVector((M+1)*(N+1)+1:2*(M+1)*(N+1))printf ("Norm of resVector = %f\n", sqrt(resVector'*resVector));  hDown = -h/2;hTop = h/2;feCount = N*M;count = 8*feCount;hDelta = (hTop - hDown)/M;lDelta = l/N;midPaneResult=zeros(N+1,1);for p=1:N+1  i_new = (M+1)*(N+1)+fix(M/2)*(N + 1) + p  temp=resVector(i_new);  midPaneResult(p) = temp;endw=sqrt(lam(ind)/rho);y = (cos(w*0)+sin(w*0)).*midPaneResult;x=0:l/N:l;h = plot(x, y);axis([0 l -1 1]);for t = 0.001:0.0001:5  y = (cos(w*t)+sin(w*t)).*midPaneResult;  set(h, 'YData', y);  pause(0.1);end%%    lnodes = sorted(nodes, key=lambda n: n.index)%%%  X_init = [];%  Y_init = [];%  X_deformed = [];%  Y_deformed = [];%%  for i=1:N+1%%      a1 = (i-1)*lDelta;%      a2 = hDown;%%      if (K > 0)%          ar = (pi + K * l) / 2 - a1 * K;%          x = (1 / K + a2 + gA * cos(gV * ar)) * cos(ar);%          y = (1 / K + a2 + gA * cos(gV * ar)) * sin(ar);%      else%        x=a1;%        y=a2;%      end%%      X_init=[X_init, x];%      Y_init=[Y_init, y];%%      node_i=M*(N+1)+i%      %      a1%      a2%      %      a1 = a1 + v1(M*(N+1)+i)%      a2 = a2 + v2(M*(N+1)+i)%      if (K > 0)%          ar = (pi + K * l) / 2 - a1 * K;%          x = (1 / K + a2 + gA * cos(gV * ar)) * cos(ar);%          y = (1 / K + a2 + gA * cos(gV * ar)) * sin(ar);%      else%        x=a1;%        y=a2;%      end%%      X_deformed=[X_deformed, x];%      Y_deformed=[Y_deformed, y];%%  end%  %  for i=1:N+1%%      a1 = (N+1-i)*lDelta;%      a2 = hTop;%%      if (K > 0)%          ar = (pi + K * l) / 2 - a1 * K;%          x = (1 / K + a2 + gA * cos(gV * ar)) * cos(ar);%          y = (1 / K + a2 + gA * cos(gV * ar)) * sin(ar);%      else%        x=a1;%        y=a2;%      end%%      X_init=[X_init, x];%      Y_init=[Y_init, y];%%      a1 = a1 + v1(N+1-i+1);%      a2 = a2 + v2(N+1-i+1);%      if (K > 0)%          ar = (pi + K * l) / 2 - a1 * K;%          x = (1 / K + a2 + gA * cos(gV * ar)) * cos(ar);%          y = (1 / K + a2 + gA * cos(gV * ar)) * sin(ar);%      else%        x=a1;%        y=a2;%      end%%      X_deformed=[X_deformed, x];%      Y_deformed=[Y_deformed, y];%%  end%%  %%    X_init=[X_init, X_init(1)];%    Y_init=[Y_init, Y_init(1)];%    X_deformed=[X_deformed, X_deformed(1)];%    Y_deformed=[Y_deformed, Y_deformed(1)];%%    figure%    plot(X_init, Y_init)%    hold on%    plot(X_deformed, Y_deformed)